# vim: fdm=indent
'''
author:     Joan Camunas Soler, Fabio Zanini
date:       17/07/17
content:    Master Snakefile for single-cell rnaseq experiments
'''
# Modules
import os

import singlecell.filenames as sc
from singlecell.pipeline.pipeline import Pipeline


# Env var-masked command line arguments
if 'SINGLECELL_SNAKEFILE_SAMPLENAMES' not in os.environ:
    raise ValueError('Missing env variable: SINGLECELL_SNAKEFILE_SAMPLENAMES')
samplenames = os.getenv('SINGLECELL_SNAKEFILE_SAMPLENAMES').split(':')   
if not len(samplenames):
    raise ValueError('SINGLECELL_SNAKEFILE_SAMPLENAMES is empty')
if samplenames[0] == 'ignore_missing':
    ignore_missing = True
    if not len(samplenames):
        raise ValueError('SINGLECELL_SNAKEFILE_SAMPLENAMES is empty')
    samplenames = samplenames[1:]
else:
    ignore_missing = False

pipe = Pipeline(samplenames, online=False, ignore_missing=ignore_missing)

n_sn_in = len(samplenames)
samplenames = pipe.get_samplenames_found()
n_sn_found = len(samplenames)
print('In: {:}, found: {:}, missing: {:}'.format(n_sn_in, n_sn_found, n_sn_in - n_sn_found))
samplenames_B = pipe.get_samplenames_celltype('B')


# Rules
localrules: all, htseq_merge, virus_merge
rule all:
  input: expand(sc.samples_foldername + "{sample}/star/Aligned.out.bam", sample=samplenames),\
         expand(sc.samples_foldername + "{sample}/nextgenmap_{virus}/mapped_to_virus_unfiltered.bam", sample=samplenames, virus=['dengue', 'zika']),\
         expand(sc.samples_foldername + "{sample}/nextgenmap_{virus}/mapped_to_virus.bam", sample=samplenames, virus=['dengue', 'zika']),\
         expand(sc.samples_foldername + "{sample}/htseq/counts.tsv", sample=samplenames),\
         expand(sc.samples_foldername + "{sample}/stampy_{virus}/mapped_to_virus_unfiltered.bam", sample=samplenames, virus=['dengue', 'zika']),\
         expand(sc.samples_foldername + "{sample}/stampy_{virus}/mapped_to_virus.bam", sample=samplenames, virus=['dengue', 'zika']),\
         #expand(sc.samples_foldername + "{sample}/trinity.done", sample=samplenames_B),\
         #expand(sc.samples_foldername + "{sample}/BASIC.done", sample=samplenames_B),\
         #expand(sc.samples_foldername + "{sample}/igblast.done", sample=samplenames_B),\
         #expand(sc.samples_foldername + "{sample}/igblast-filter.done", sample=samplenames_B),\
         #expand(sc.samples_foldername + "{sample}/blast_constant.done", sample=samplenames_B),\
         # FIXME: this does not work if only a subset of an experiment is selected
         pipe.get_htseq_merge_filenames(fmts=['pickle', 'tsv']),
         pipe.get_virus_merge_filenames(viruses=['dengue', 'zika'], fmts=['pickle', 'tsv'])


rule STAR:
  input: reads=pipe.input_files_raw_reads
  output: "{dir}/{sample}/star/Aligned.out.bam" ,\
          "{dir}/{sample}/star/Unmapped.out.mate1",\
          "{dir}/{sample}/star/Unmapped.out.mate2"
  threads: 6
  params: name="STAR_{sample}", mem="32000"
  version: "2.5.2b"
  log: logout="{dir}/{sample}/log/cluster_{sample}_STAR.log", logerr="{dir}/{sample}/log/cluster_{sample}_STAR.logerr"
  run:
    STAR=os.getenv("STAR", "STAR")
    s=wildcards["sample"]
    pathToGenomeIndex=sc.get_star_genomedir_foldername()
    check_done=os.path.join(wildcards["dir"], wildcards["sample"], "star.done")
    output_folder=os.path.join(wildcards["dir"], wildcards["sample"], "star/")
    shell("""
        {STAR} \
        --runThreadN {threads} \
        --runMode alignReads \
        --genomeDir {pathToGenomeIndex} \
        --readFilesIn {input.reads[0]} {input.reads[1]} \
        --readFilesCommand zcat \
        --outFilterType BySJout \
        --outFilterMultimapNmax 20 \
        --alignSJoverhangMin 8 \
        --alignSJDBoverhangMin 1 \
        --outFilterMismatchNmax 999 \
        --outFilterMismatchNoverLmax 0.04 \
        --alignIntronMin 20 \
        --alignIntronMax 1000000 \
        --alignMatesGapMax 1000000 \
        --outSAMstrandField intronMotif \
        --outFileNamePrefix {output_folder} \
        --outSAMtype BAM Unsorted \
        --outSAMattributes NH HI AS NM MD \
        --outFilterMatchNminOverLread 0.4 \
        --outFilterScoreMinOverLread 0.4 \
        --clip3pAdapterSeq CTGTCTCTTATACACATCT \
        --outReadsUnmapped Fastx
    """)
    shell("touch {check_done}")


rule htseq:
  input: rules.STAR.output
  output: "{dir}/{sample}/htseq/counts.tsv" 
  params: name="htseq_{sample}", mem="8192"
  log: logout="{dir}/{sample}/log/cluster_{sample}_htseq.log", logerr="{dir}/{sample}/log/cluster_{sample}_htseq.logerr"
  threads: 1
  run:
    HTSEQ_COUNT=os.getenv("HTSEQ-COUNT", "htseq-count")
    pathToGenomeIndex=sc.get_star_genomedir_foldername()
    GenomeIndexFile=sc.get_htseq_count_annotation_filename()
    check_done=os.path.join(
        wildcards["dir"],
        wildcards["sample"],
        "htseq-count.done")
    output_temp=output[0] + "_tmp"
    shell("""
          {HTSEQ_COUNT} \
          --format bam \
          --mode intersection-nonempty \
          --stranded no \
          --secondary-alignments ignore \
          --supplementary-alignments ignore \
          {input[0]} {GenomeIndexFile} > {output}
    """)
    pipe.add_unmapped_to_htseq_count(wildcards, output[0])
    shell("touch {check_done}")


rule htseq_merge:
  input: pipe.get_htseq_single_filenames_by_experiment
  output: expand(sc.experiments_foldername + "{{expname}}/counts.{fmt}", fmt=['tsv', 'pickle']),\
          expand(sc.experiments_foldername_small + "{{expname}}/counts.{fmt}", fmt=['tsv', 'pickle'])

  params: name="htseq_{expname}", mem="8192"
  log: logout=sc.experiments_foldername + "{expname}/log/cluster_htseq_merge.log", logerr=sc.experiments_foldername + "{expname}/log/cluster_htseq_merge.logerr"
  threads: 1
  run:
    pipe.merge_htseq_counts(output)


rule virus_merge:
  input: pipe.get_virus_counts_single_filenames_by_experiment
  output: expand(sc.experiments_foldername + "{{expname}}/{virus}_counts.{fmt}", fmt=['tsv', 'pickle'], virus=['dengue', 'zika']),\
          expand(sc.experiments_foldername_small + "{{expname}}/{virus}_counts.{fmt}", fmt=['tsv', 'pickle'], virus=['dengue', 'zika'])
  params: name="virus_counts_merge_{expname}", mem="8192"
  log: logout=sc.experiments_foldername + "{expname}/log/cluster_virus_merge.log", logerr=sc.experiments_foldername + "{expname}/log/cluster_virus_merge.logerr"
  threads: 1
  run:
    pipe.merge_virus_counts(output)


rule align_STAR_unmapped:
  input: rules.STAR.output
  output: "{dir}/{sample}/star/unmapped1.fastq.gz", "{dir}/{sample}/star/unmapped2.fastq.gz" 
  log: logout="{dir}/{sample}/log/cluster_{sample}_align_star_unmapped.log", logerr="{dir}/{sample}/log/cluster_{sample}_align_star_unmapped.logerr"
  params: name="align_star_unmapped_{sample}", mem="8192"
  threads: 1
  run:
    check_done=os.path.join(
        wildcards["dir"],
        wildcards["sample"],
        "align_star_unmapped.done")
    pipe.align_unmapped_star_reads(wildcards, input[1:], output)
    shell("touch {check_done}")


rule virus_map:
  input: rules.align_STAR_unmapped.output
  output: "{dir}/{sample}/nextgenmap_{virus}/mapped_to_virus_unfiltered.bam"
  params: name="nextgenmap_{sample}", mem="8192"
  log: logout="{dir}/{sample}/log/cluster_{sample}_nextgenmap_{virus}.log", logerr="{dir}/{sample}/log/cluster_{sample}_nextgenmap_{virus}.logerr"
  threads: 1
  run:
    virus_reference=pipe.get_virus_reference(wildcards)
    check_done=os.path.join(
        wildcards["dir"],
        wildcards["sample"],
        "nextgenmap_"+wildcards['virus']+".done")
    # NOTE: ngm fails if 0 input reads
    shell('if [ -n "$(zcat {input[0]})" ]; then ngm -b --no-unal -r {virus_reference} -1 {input[0]} -2 {input[1]} -o {output} --very-fast; else touch {output}; fi')
    shell("touch {check_done}")


rule virus_map_stampy:
  input: rules.align_STAR_unmapped.output
  output: "{dir}/{sample}/stampy_{virus}/mapped_to_virus_unfiltered.bam"
  params: name="stampy_{sample}", mem="8192"
  log: logout="{dir}/{sample}/log/cluster_{sample}_stampy_{virus}.log", logerr="{dir}/{sample}/log/cluster_{sample}_stampy_{virus}.logerr"
  threads: 1
  run:
    virus_reference=pipe.get_virus_reference(wildcards)
    check_done=os.path.join(
        wildcards["dir"],
        wildcards["sample"],
        "stampy_"+wildcards['virus']+".done")
    output_sam=output[0][:-3]+'sam'
    output_index=output[0][:-3]+'stidx'
    output_hash=output[0][:-3]+'sthash'
    output_prefix_sg='/stampy/'+os.path.basename(output_index[:-6])
    reference_folder=os.path.dirname(virus_reference)
    reference_sg='/stampy_reference/'+os.path.basename(virus_reference)
    input_sg=['/stampy_input/'+os.path.basename(i) for i in input]
    output_sam_sg='/stampy/'+os.path.basename(output_sam)
    input_folder=os.path.dirname(input[0])
    output_folder=os.path.dirname(output_index)
    stampy=sc.get_stampy_exec_filename()
    stampy_call='singularity run -B '+output_folder+':/stampy -B '+input_folder+':/stampy_input -B '+reference_folder+':/stampy_reference '+stampy
    shell("rm -f {output_sam} {output_index} {output_hash}")
    shell(stampy_call+" -G {output_prefix_sg} {reference_sg}")
    shell(stampy_call+" -g {output_prefix_sg} -H {output_prefix_sg}")
    shell(stampy_call+" -g {output_prefix_sg} -h {output_prefix_sg} --inputformat=fastq -o {output_sam_sg} --substitutionrate=0.05 --sensitive -M {input_sg[0]} {input_sg[1]}")
    shell("samtools view -bT {virus_reference} {output_sam} > {output}")
    shell("rm {output_sam}")
    shell("touch {check_done}")


rule virus_filter:
  input: rules.virus_map.output
  output: "{dir}/{sample}/nextgenmap_{virus}/mapped_to_virus.bam"
  params: name="nextgenmap_filter_{sample}", mem="4000"
  log: logout="{dir}/{sample}/log/cluster_{sample}_nextgenmap_filter_{virus}.log", logerr="{dir}/{sample}/log/cluster_{sample}_nextgenmap_filter_{virus}.logerr"
  threads: 1
  run:
    check_done=os.path.join(
        wildcards["dir"],
        wildcards["sample"],
        "nextgenmap_filter_"+wildcards['virus']+".done")
    pipe.filter_virus_reads(wildcards, input[0], output[0], 'nextgenmap')
    shell("touch {check_done}")


rule virus_filter_stampy:
  input: rules.virus_map_stampy.output
  output: "{dir}/{sample}/stampy_{virus}/mapped_to_virus.bam"
  params: name="stampy_filter_{sample}", mem="4000"
  log: logout="{dir}/{sample}/log/cluster_{sample}_stampy_filter_{virus}.log", logerr="{dir}/{sample}/log/cluster_{sample}_stampy_filter_{virus}.logerr"
  threads: 1
  run:
    check_done=os.path.join(
        wildcards["dir"],
        wildcards["sample"],
        "stampy_filter_"+wildcards['virus']+".done")
    pipe.filter_virus_reads(wildcards, input[0], output[0], 'stampy', min_longest_match=25)
    shell("touch {check_done}")
